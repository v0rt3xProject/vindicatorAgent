package ru.v0rt3x.vindicator.exploit;

import org.json.simple.JSONArray;
import org.json.simple.JSONObject;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import ru.v0rt3x.vindicator.agent.VindicatorAgent;
import ru.v0rt3x.vindicator.common.PSUtils;

import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.function.Function;
import java.util.stream.Collectors;

public class ExploitManager {

    private static Logger logger = LoggerFactory.getLogger(ExploitManager.class);

    private ExploitManager() {}

    public static class Exploit {

        private String name;
        private String command;

        public Exploit(String name, String command) {
            this.name = name;
            this.command = command;
        }

        public String name() {
            return name;
        }

        public List<String> exec(String target) {
            try {
                return PSUtils.exec(command.replace("%T", target).split(" "));
            } catch (InterruptedException | IOException e) {
                logger.error("Unable to execute exploit: [{}]: {}", e.getClass().getSimpleName(), e.getMessage());
                return new ArrayList<>();
            }
        }

        public List<List<String>> exec(List<String> targetList) {
            return targetList.parallelStream().map(this::exec).collect(Collectors.toList());
        }

        @SuppressWarnings("unchecked")
        public JSONObject toJSON() {
            JSONObject object = new JSONObject();

            object.put("name", name);
            object.put("command", command);

            return object;
        }
    }

    public static List<Exploit> list() {
        List<Exploit> exploits = new ArrayList<>();
        for (String exploitKey: VindicatorAgent.getInstance().config().getKeys("exploits")) {
            String exploitCommand = VindicatorAgent.getInstance().config().getString(exploitKey, null);
            exploits.add(new Exploit(exploitKey.replace("exploits.", ""), exploitCommand));
        }
        return exploits;
    }

    @SuppressWarnings("unchecked")
    public static JSONArray listToJSON() {
        JSONArray exploits = new JSONArray();
        exploits.addAll(list().stream().map(Exploit::toJSON).collect(Collectors.toList()));
        return exploits;
    }
}
